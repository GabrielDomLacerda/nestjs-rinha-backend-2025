version: '3.9'

services:
  rabbit:
    image: rabbitmq:4-management
    restart: unless-stopped
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS}
    ports:
      - "${RABBIT_PORT}:${RABBIT_PORT}"
      - "15672:15672"
    networks: [backend]

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    env_file: .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      PORT: ${API_PORT}
      RABBIT_URL: amqp://${RABBIT_USER}:${RABBIT_PASS}@${RABBIT_HOST}:${RABBIT_PORT}
    depends_on: [db, rabbit]
    ports:
      - "${API_PORT}:3000"
    networks: [backend]

  worker:
    build:
      context: .
      dockerfile: apps/worker/Dockerfile
    env_file: .env
    environment:
      RABBIT_URL: amqp://${RABBIT_USER}:${RABBIT_PASS}@${RABBIT_HOST}:${RABBIT_PORT}
    depends_on: [db, rabbit]
    networks: [backend]

  health-checker:
    build:
      context: .
      dockerfile: apps/health-checker/Dockerfile
    env_file: .env

  db:
    image: postgres:17-alpine
    container_name: pg-drizzle
    restart: unless-stopped
    env_file: .env
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [backend]


volumes:
  pgdata:

networks:
  backend:  
    driver: bridge
